{"version":3,"sources":["Main/ui/header/header.tsx","Main/ui/commonStyles/commonStyles.tsx","Features/auth/profile/profile.tsx","Main/ui/common/input.tsx","Main/ui/common/buttons.tsx","Features/auth/login/login.tsx","Features/auth/recovery/recovery.tsx","Features/auth/passwordManaging/passwordManaging.tsx","Features/auth/registration/registration.tsx","Main/ui/route/routes.tsx","Main/ui/App.tsx","serviceWorker.ts","index.tsx"],"names":["HeaderWrapper","styled","div","Link","NavLink","Header","to","CommonWrapper","CommonForm","ButtonWrapper","ProfileWrapper","Profile","InputWrapper","input","Input","props","placeholder","button","inputColor","ButtonName","Button","color","name","LoginWrapper","Login","RecoveryWrapper","Recovery","PasswordWrapper","PasswordManaging","RegistrationWrapper","Registration","Routes","path","render","Wrapper","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be45f266.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components/macro\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst HeaderWrapper = styled.div`\r\n  max-width: 1082px;\r\n  margin: auto;\r\n  display: flex;\r\n  flex-grow: 0;\r\n`;\r\n\r\nconst Link = styled(NavLink)`\r\n  width: 20%;\r\n  text-align: center;\r\n  padding: 20px 10px;\r\n  text-decoration: none;\r\n  color: grey;\r\n  font-weight: bold;\r\n  font-size: 15px;\r\n  text-transform: uppercase;\r\n  transition: 0.6s;\r\n  height: 60px;\r\n  line-height: 60px;\r\n  &:hover{\r\n    color: white;\r\n    font-size: 16px;\r\n      &:nth-child(1){\r\n        background-color: #29363B\r\n      };\r\n      &:nth-child(2){\r\n        background-color: #EA495F\r\n      };\r\n      &:nth-child(3){\r\n        background-color: #F4837D\r\n      };\r\n      &:nth-child(4){\r\n        background-color: #FDCEA9\r\n      };\r\n      &:nth-child(5){\r\n        background-color: #99B998\r\n      };\r\n  }\r\n`;\r\n\r\nconst Header = () => {\r\n    return (\r\n        <HeaderWrapper>\r\n            <Link to='/registration'>Registration</Link>\r\n            <Link to='/authorisation'>Authorisation</Link>\r\n            <Link to='/recovery'>Password recovery</Link>\r\n            <Link to='/new-password'>Set new password</Link>\r\n            <Link to='/profile'>Profile</Link>\r\n        </HeaderWrapper>\r\n    )\r\n};\r\n\r\nexport default Header","import styled from \"styled-components/macro\";\r\n\r\nexport const CommonWrapper = styled.div`\r\n  max-width: 1082px;\r\n  min-height: 60vh;\r\n  margin: 30px auto;\r\n  position: relative;\r\n`;\r\n\r\nexport const CommonForm = styled.div`\r\n  width: 600px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translateX(-50%) translateY(-50%);\r\n  background-color: cornsilk;\r\n  opacity: 0.6;\r\n`;\r\n\r\nexport const ButtonWrapper = styled.div`\r\n  margin: 0 auto;\r\n  width: min-content;\r\n  padding: 20px 0;\r\n`;","import React from 'react';\r\nimport {CommonWrapper} from \"../../../Main/ui/commonStyles/commonStyles\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ProfileWrapper = styled(CommonWrapper)`\r\n  background-color: #99B998;\r\n`;\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <ProfileWrapper>\r\n\r\n        </ProfileWrapper>\r\n    )\r\n};\r\n\r\nexport default Profile","import React from 'react';\r\nimport styled from \"styled-components/macro\";\r\n\r\nconst InputWrapper = styled.input`\r\n  display: block;\r\n  height: 60px;\r\n  width: 350px;\r\n  padding: 0 40px;\r\n  margin: 40px auto;\r\n  color: grey;\r\n  border: none;\r\n  border-bottom:1px solid grey;\r\n  font-size: 15px;\r\n  background-color: transparent;\r\n  &::placeholder {\r\n    transition: transform 0.5s;\r\n    text-transform: uppercase;\r\n    position:relative;\r\n  };\r\n  &:hover,\r\n  &:focus,\r\n  &:active {\r\n    color:#ff5722;\r\n    outline:none;\r\n    border-bottom:1px solid #ff5722;\r\n    &::placeholder{\r\n      color:#ff5722;\r\n      transform:translateY(-20px);\r\n  }\r\n`;\r\n\r\ntype PropsType = {\r\n    placeholder: string\r\n}\r\n\r\nconst Input = (props: PropsType) => {\r\n    return (\r\n        <InputWrapper placeholder={props.placeholder}/>\r\n    )\r\n};\r\n\r\nexport default Input","import React from 'react';\r\nimport styled from \"styled-components/macro\";\r\n\r\nconst ButtonWrapper = styled.button<{inputColor: string}>`\r\n  position: relative;\r\n  cursor: pointer;\r\n  width: 250px;\r\n  height: 60px;\r\n  background-color: ${props => props.inputColor};\r\n  border: none;\r\n  &:hover > div {\r\n    transform: translateX(10%) translateY(-50%);\r\n  }\r\n`;\r\n\r\nconst ButtonName = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translateX(-50%) translateY(-50%);\r\n  transition: transform 0.5s;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  font-size: 15px;\r\n`;\r\n\r\ntype PropsType = {\r\n    color: string,\r\n    name: string\r\n}\r\n\r\nconst Button = (props: PropsType) => {\r\n    return (\r\n        <ButtonWrapper inputColor={props.color}>\r\n            <ButtonName>\r\n                {props.name}\r\n            </ButtonName>\r\n        </ButtonWrapper>\r\n    )\r\n};\r\n\r\nexport default Button","import React from 'react';\r\nimport Input from \"../../../Main/ui/common/input\";\r\nimport Button from \"../../../Main/ui/common/buttons\";\r\nimport {ButtonWrapper, CommonForm, CommonWrapper} from \"../../../Main/ui/commonStyles/commonStyles\";\r\nimport styled from \"styled-components\";\r\n\r\nconst LoginWrapper = styled(CommonWrapper)`\r\n  background-color: #EA495F;\r\n`;\r\n\r\nconst Login = () => {\r\n    return (\r\n        <LoginWrapper>\r\n            <CommonForm>\r\n                <Input placeholder={'Login'}/>\r\n                <Input placeholder={'password'}/>\r\n                <ButtonWrapper>\r\n                    <Button color={'#EA495F'} name={'log in'}/>\r\n                </ButtonWrapper>\r\n            </CommonForm>\r\n        </LoginWrapper>\r\n    )\r\n};\r\n\r\nexport default Login","import React from 'react';\r\nimport {ButtonWrapper, CommonForm, CommonWrapper} from \"../../../Main/ui/commonStyles/commonStyles\";\r\nimport Input from \"../../../Main/ui/common/input\";\r\nimport Button from \"../../../Main/ui/common/buttons\";\r\nimport styled from \"styled-components\";\r\n\r\nconst RecoveryWrapper = styled(CommonWrapper)`\r\n  background-color: #F4837D;\r\n`;\r\n\r\nconst Recovery = () => {\r\n    return (\r\n        <RecoveryWrapper>\r\n            <CommonForm>\r\n                <Input placeholder={'your e-mail'}/>\r\n                <ButtonWrapper>\r\n                    <Button color={'#F4837D'} name={'reset password'}/>\r\n                </ButtonWrapper>\r\n            </CommonForm>\r\n        </RecoveryWrapper>\r\n    )\r\n};\r\n\r\nexport default Recovery","import React from 'react';\r\nimport {ButtonWrapper, CommonForm, CommonWrapper} from \"../../../Main/ui/commonStyles/commonStyles\";\r\nimport Input from \"../../../Main/ui/common/input\";\r\nimport Button from \"../../../Main/ui/common/buttons\";\r\nimport styled from \"styled-components\";\r\n\r\nconst PasswordWrapper = styled(CommonWrapper)`\r\n  background-color: #FDCEA9;\r\n`;\r\n\r\nconst PasswordManaging = () => {\r\n    return (\r\n        <PasswordWrapper>\r\n            <CommonForm>\r\n                <Input placeholder={'new password'}/>\r\n                <ButtonWrapper>\r\n                    <Button color={'#FDCEA9'} name={'submit password'}/>\r\n                </ButtonWrapper>\r\n            </CommonForm>\r\n        </PasswordWrapper>\r\n    )\r\n};\r\n\r\nexport default PasswordManaging","import React from 'react';\r\nimport styled from \"styled-components/macro\";\r\nimport {ButtonWrapper, CommonForm, CommonWrapper} from \"../../../Main/ui/commonStyles/commonStyles\";\r\nimport Input from \"../../../Main/ui/common/input\";\r\nimport Button from \"../../../Main/ui/common/buttons\";\r\n\r\nconst RegistrationWrapper = styled(CommonWrapper)`\r\n  background-color: #29363B;\r\n`;\r\n\r\nconst Registration = () => {\r\n    return (\r\n        <RegistrationWrapper>\r\n            <CommonForm>\r\n                <Input placeholder={'e-mail'}/>\r\n                <Input placeholder={'login'}/>\r\n                <Input placeholder={'password'}/>\r\n                <ButtonWrapper>\r\n                    <Button color={'#29363B'} name={'sign up'}/>\r\n                </ButtonWrapper>\r\n            </CommonForm>\r\n        </RegistrationWrapper>\r\n    )\r\n};\r\n\r\nexport default Registration","import React from 'react';\r\nimport {Route} from \"react-router-dom\";\r\nimport Profile from \"../../../Features/auth/profile/profile\";\r\nimport Login from \"../../../Features/auth/login/login\";\r\nimport Recovery from \"../../../Features/auth/recovery/recovery\";\r\nimport PasswordManaging from \"../../../Features/auth/passwordManaging/passwordManaging\";\r\nimport Registration from \"../../../Features/auth/registration/registration\";\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <>\r\n            <Route path='/profile' render={() => <Profile/>}/>\r\n            <Route path='/authorisation' render={() => <Login/>}/>\r\n            <Route path='/recovery' render={() => <Recovery/>}/>\r\n            <Route path='/new-password' render={() => <PasswordManaging/>}/>\r\n            <Route path='/registration' render={() => <Registration/>}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Routes","import React from 'react';\nimport styled from \"styled-components/macro\";\nimport Header from \"./header/header\";\nimport Routes from \"./route/routes\";\n\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: cornsilk;\n`;\n\nconst App = () => {\n    return (\n        <Wrapper>\n            <Header/>\n            <Routes/>\n        </Wrapper>\n    );\n}\n\nexport default App;\n","// This optional code is used to registration a service worker.\n// registration() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just registration service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Main/ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <App/>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to registration() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}